Hey, just copy and paste what you want from this and delete it when you're finished. I'm still kinda scared of messing up git, and I'm too busy to try to learn it properly right now.

------------first paragraph----------------------
Our group members are students in Dr. Philips' 2019 Neural Networks class held at Middle Tennessee State University. Our proposal is to teach two architecturally different networks to detect schizophrenia from fMRI data. To that end we had two major goals: first to train our networks to achieve an accuracy above 75% on schizophrenia detection, and second to declare a "winner" based upon the specific architectural differences beween the two nets. The architectural comparisons will involve relative accuracy in detection, as before, as well as training speed, size of input data, number of neurons, numer of layers, complexity of preprocessing, complexity of implementation, and overall feasibility of use within an fMRI analysis environment.
-----------second paragraph-----------------------
For convenience, we will give a brief overview of fMRI in general as well as the data we used in our project. Functional magnetic resonance imaging (fMRI) is a technique used to create a 4D "image" of the brain over a period of time. It involves using two powerful electromagnets and a radiofrequency burst to detect the Nuclear Magnetic Resonance of hydrogen protons. This allows us to detect the presense of oxygenated blood at a very specific location - which in turn allows us to "see" into neuron activity, as an active neuron draws more oxygenated blood. (Yang 2016) [I have that paper and can send it to you on slack] What makes fMRI useful is that certain regions of the brain only activate when performing certain tasks. For instance, different layers of the visual cortex will activate when looking at different images; likewise, different parts of the motor cortex "light up" when the patient is performing different physical movements. To depict this information in a human-readable way, fMRI data uses the BOLD (Blood-Oxygen-Level Dependent) technique to color code neural activity. The data is broken up into 2D "slices" that when combined, create a 3D image of the patient's brain. This 3D image is made up of voxels (volumetric pixels, or 3D pixels) each of which represents millions of neurons. Finally this 3D volumetric image is taken over several minutes - generally while the patient performs some task. This unfortunately translates to a very large data size (sometimes up to thousands of voxels) which includes lots of noise (unrelated neurons). This can make processing the data into something more useful to analyze quite a difficult task.
----------third paragraph----------------------------
The data we chose for this project was the COBRE dataset. This dataset contains fMRI data from 72 patients with schizophrenia and 75 without (COBRE). Ages ranged from 18 to 65 years old. Patients were excluded if they had any history of serious unrelated illness (physical or cognitive) in the last 12 months. The data itself measures blood oxeygen levels in a 4D matrix (subject#, X, Y, Z, t). After getting our data, we moved on to preprocessing. Here we detrended, standardized, and ran it through high and low pass filters. The output data remained the same shape, which was still quite large. To reduce the size we ran it through a mask called MSDL atlas (cite). This tool takes the processed input scans and breaks it into 39 regions,  each containing the averages of the fMRI blood oxeygen levels in all of the voxels in that region. Ultimately, it significantly reduced both the size and noise of the data. The data was now in the form: (subject#, region of interest, t). Next we needed information on how the regions of interest were connected. To do this, we computed a covariance matrix of the masks using the group sparse covariance method. Once we had these covariance values - (subject#, region of interest, region of interest) - our final modification was to flatten the data into a 1D vector. Due to the symmetric characteristic of covariance matrices, only half of the values would be pulled thus making the final array: (patient#, regions of interest flattened). This array would be the input layer for the neural network. It would be followed by a 10% dropout layer to get better generalization. This was followed by a hidden layer containing 350 parameters which use the ReLu activation function alongside batch normalization. The ouput layer uses Binary Cross-entropy Loss and sigmoid activation. The network's output is a single binary response, telling us the network's classification of whether or not the patient had schizophrenia.